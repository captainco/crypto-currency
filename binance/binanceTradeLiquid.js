require('dotenv').config({ path: '../env/live.env' });
const telegram                                 = require("../telegram/telegram");
const WebSocket                                = require("ws");
const binance                                  = require('./binance');
const common                                   = require('../common');
const sleep                                    = require('thread-sleep');
process.env.envBinanceFunctionLiquidOpenTrade  = `wss://fstream.binance.com/ws/${process.env.envBinanceFunctionSymbol.toLocaleLowerCase()}@forceOrder`;
process.env.envBinanceFunctionLiquidCloseTrade = `wss://fstream.binance.com/ws/${process.env.envBinanceFunctionSymbol.toLocaleLowerCase()}@markPrice@1s`;
process.env.CloseTrading                       = "0";

async function Main() {
    /*wss://fstream.binance.com/ws/!forceOrder@arr*/
    const AlertTrading = new WebSocket(process.env.envBinanceFunctionLiquidOpenTrade);
    AlertTrading.on('message', async (event) => {
        try {
            /*Socket*/
            let result = JSON.parse(event);
            let totalValue = result.o.q * result.o.ap;
            let symbol = result.o.s;

            /*Th√¥ng b√°o thanh l√Ω*/
            if (process.env.envBinanceFunctionLiquidAlert == "1") {
                if (symbol == process.env.envBinanceFunctionSymbol) {
                    const iconLongShort = (result.o.S == "BUY") ? "üü¢" : "üî¥";
                    await telegram.log(`ü§ñ ${symbol} thanh l√Ω ${iconLongShort}: ${common.FormatNumberToString(totalValue)}`);
                }
            }
        } catch (e) {
            await telegram.log(`‚ö† ${e}`);
        }
    });

    const OpenTrading = new WebSocket(process.env.envBinanceFunctionLiquidOpenTrade);
    OpenTrading.on('message', async (event) => {
        try {
            /*Socket*/
            let result = JSON.parse(event);
            let totalValue = result.o.q * result.o.ap;
            let symbol = result.o.s;
            let sideMy = result.o.S == 'BUY' ? 'SELL' : 'BUY';

            /*N·∫±m trong gi√° thanh l√Ω setup th√¨ v√†o l·ªánh*/
            if (totalValue > Number(process.env.envBinanceFunctionLiquidAmount) && symbol == process.env.envBinanceFunctionSymbol) {

                /*Ki·ªÉm tra bot xem c√≥ cho v√†o l·ªánh ko?*/
                if (process.env.envTelegramBotStatus == "1") {

                    /*Ki·ªÉm tra xem c√≥ v·ªã th·∫ø ko? N·∫øu ko c√≥ th√¨ v√†o*/
                    const checkPs = (await binance.FuturesPositionRisk(symbol))[0];
                    if (checkPs.positionAmt == 0) {
                        
                        const quantity = Number(process.env.envBinanceFunctionPrice);
                        await binance.FuturesMarketBuySell(symbol, quantity, sideMy);
                        process.env.envBinanceFunctionLiquidTPSLVol = (totalValue / 1000).toFixed(0);
                        
                        /*Fix c·ª©ng v∆∞·ª£t qu√° 10 gi√° th√¨ m·∫∑c ƒë·ªãnh 10 gi√°*/
                        process.env.envBinanceFunctionLiquidTPSLVol = process.env.envBinanceFunctionLiquidTPSLVol > 10 ? 10 : process.env.envBinanceFunctionLiquidTPSLVol;

                        /*G·ª≠i th√¥ng b√°o*/
                        const alertPs = (await binance.FuturesPositionRisk(symbol))[0];
                        const iconLongShort = (sideMy == "BUY") ? "üü¢" : "üî¥";
                        await telegram.log(`${iconLongShort} ${symbol} ${process.env.envBinanceFunctionLeverage}x|${alertPs.positionAmt}: ${alertPs.entryPrice}`);

                        process.env.CloseTrading = "0";

                        sleep(1000);
                    }
                }
            }
        } catch (e) {
            await telegram.log(`‚ö† ${e}`);
        }
    });

    const CloseTrading = new WebSocket(process.env.envBinanceFunctionLiquidCloseTrade);
    CloseTrading.on('message', async (event) => {
        try {
            /*N·∫øu l·ªánh ƒëang ƒë√≥ng th√¨ return*/
            if (process.env.CloseTrading == "1") {
                return;
            }

            process.env.CloseTrading = "1";

            /*Ki·ªÉm tra xem c√≥ l·ªánh kh√¥ng? N·∫øu c√≥ th√¨ s·∫Ω c·∫Øt l√£i ho·∫∑c l·ªó*/
            const symbol = process.env.envBinanceFunctionSymbol;
            const checkPs = (await binance.FuturesPositionRisk(symbol))[0];

            /*N·∫øu l√† k√®o long*/
            if (checkPs.positionAmt > 0) {
                
                /*N·∫øu l√£i*/
                if (checkPs.entryPrice + Number(process.env.envBinanceFunctionLiquidTPSLVol) < checkPs.markPrice) {
                    
                    /*ƒê√≥ng l·ªánh*/
                    await binance.FuturesMarketBuySell(symbol, checkPs.positionAmt, "SELL");

                    /*G·ª≠i th√¥ng b√°o*/
                    await telegram.log(`‚úÖüü¢ ${symbol} ${process.env.envBinanceFunctionLeverage}x|${checkPs.positionAmt}: ${checkPs.unRealizedProfit}USDT`);
                }
                /*N·∫øu l·ªó*/
                else if (checkPs.entryPrice - (Number(process.env.envBinanceFunctionLiquidTPSLVol)*2) > checkPs.markPrice) {
                    
                    /*ƒê√≥ng l·ªánh*/
                    await binance.FuturesMarketBuySell(symbol, checkPs.positionAmt, "SELL");

                    /*G·ª≠i th√¥ng b√°o*/
                    await telegram.log(`‚ùåüü¢ ${symbol} ${process.env.envBinanceFunctionLeverage}x|${checkPs.positionAmt}: ${checkPs.unRealizedProfit}USDT`);
                }
            }
            /*N·∫øu l√† k√®o short*/
            else if (checkPs.positionAmt < 0) {
                
                /*N·∫øu l√£i*/
                if (checkPs.entryPrice - Number(process.env.envBinanceFunctionLiquidTPSLVol) > checkPs.markPrice) {
                    
                    /*ƒê√≥ng l·ªánh*/
                    await binance.FuturesMarketBuySell(symbol, checkPs.positionAmt, "BUY");

                    /*G·ª≠i th√¥ng b√°o*/
                    await telegram.log(`‚úÖüî¥ ${symbol} ${process.env.envBinanceFunctionLeverage}x|${checkPs.positionAmt}: ${checkPs.unRealizedProfit}USDT`);
                }
                /*N·∫øu l·ªó*/
                else if (checkPs.entryPrice + (Number(process.env.envBinanceFunctionLiquidTPSLVol)*2) < checkPs.markPrice) {
                    
                    /*ƒê√≥ng l·ªánh*/
                    await binance.FuturesMarketBuySell(symbol, checkPs.positionAmt, "BUY");

                    /*G·ª≠i th√¥ng b√°o*/
                    await telegram.log(`‚ùåüî¥ ${symbol} ${process.env.envBinanceFunctionLeverage}x|${checkPs.positionAmt}: ${checkPs.unRealizedProfit}USDT`);
                }
            }

            process.env.CloseTrading = "0";

            sleep(1000);
        } catch (e) {
            process.env.CloseTrading = "0";
            await telegram.log(`‚ö† ${e}`);
        }
    });
}

module.exports = { Main }