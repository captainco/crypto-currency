require('dotenv').config({ path: '../env/live.env' });
const telegram                        = require("../telegram/telegram");
const WebSocket                       = require("ws");
const binance                         = require('./binance');
const sleep                           = require('thread-sleep');
const common                          = require('../common');
var interval                          = process.env.envBinanceFunctionRSIInterval;
var price                             = Number(process.env.envBinanceFunctionPrice);
var rsi                               = 0;
var rsiTemp                           = 0;
process.env.envBinanceFunctionRSIBOT  = process.env.envTelegramBotStatus;

async function Main() {
    const ws = new WebSocket('wss://fstream.binance.com/ws/btcusdt@markPrice@1s');
    ws.on('message', async (event) => {
        if (process.env.envTelegramBotStatus == "1") {

            var symbol   = process.env.envBinanceFunctionSymbol;
            var leverage = Number(process.env.envBinanceFunctionLeverage);

            /*Ki·ªÉm tra xem ƒë√£ ƒë·∫øn gi·ªù trade ch∆∞a?*/
            if (common.GetMomentSecond() == 59) {

                /*Ki·ªÉm tra RSI*/
                rsi = await binance.RSI(symbol, interval);

                /*Trade n·∫øu n·∫±m trong v√πng min v√† max*/
                if (rsi > Number(process.env.envBinanceFunctionRSIMin) && rsi < Number(process.env.envBinanceFunctionRSIMax)) {
                    rsiTemp = 0;
                    return;
                }

                /*ƒêi·ªÅu ch·ªânh ƒë√≤n b·∫©y n·∫øu kh√°c*/
                const checkLeverage = (await binance.FuturesPositionRisk(symbol))[0];
                if (checkLeverage.leverage != leverage) {
                    await binance.FuturesLeverage(symbol, leverage);
                    await telegram.log(`ƒê√£ ƒëi·ªÅu ch·ªânh ƒë√≤n b·∫©y ${symbol} ${leverage}}x`);
                }

                /*B·∫Øt ƒë·∫ßu trade*/
                if (rsiTemp == 0) {
                    /*Ki·ªÉm tra xem c√≥ v·ªã th·∫ø kh√¥ng? N·∫øu c√≥ th√¨ c·∫Øt l√£i n·∫øu d∆∞∆°ng*/
                    const checkPs = (await binance.FuturesPositionRisk(symbol))[0];
                    const priceTP = common.ConvertToPositiveNumber(checkPs.positionAmt);
                    if (checkPs.positionAmt != 0) {

                        /*N·∫øu l√† k√®o long*/
                        if (checkPs.positionAmt > 0) {

                            /*C·∫Øt l√£i n·∫øu qu√° mua*/
                            if (rsi > Number(process.env.envBinanceFunctionRSIMax)) {
                                const tpsl = (((checkPs.markPrice * 100 / checkPs.entryPrice) - 100) * leverage).toFixed(2);

                                /*N·∫øu ch·∫Øc ch·∫Øn ƒë√£ l√£i th√¨ s·∫Ω ch·ªët*/
                                if (checkPs.unRealizedProfit > 0) {
                                    await binance.FuturesMarketBuySell(symbol, priceTP, "SELL");
                                    await telegram.log(`ƒê√£ ƒë√≥ng v·ªã th·∫ø üü¢ ${symbol} ${leverage}x|${priceTP}: R: ${rsi}; E: ${checkPs.entryPrice}; M: ${checkPs.markPrice}; TP: ${tpsl}%`);
                                }
                                /*N·∫øu kh√¥ng l√£i th√¨ s·∫Ω th√¥ng b√°o ti·∫øp t·ª•c DCA*/
                                else {
                                    await telegram.log(`Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√≥ng v·ªã th·∫ø üü¢ ${symbol} ${leverage}x|${priceTP}: R: ${rsi}; E: ${checkPs.entryPrice}; M: ${checkPs.markPrice}; TP: ${tpsl}%`);
                                }
                            }
                        }
                        /*N·∫øu l√† k√®o short*/
                        else {

                            /*C·∫Øt l√£i n·∫øu qu√° b√°n*/
                            if (rsi < Number(process.env.envBinanceFunctionRSIMin)) {
                                const tpsl = ((100 - (checkPs.markPrice * 100 / checkPs.entryPrice)) * leverage).toFixed(2);

                                /*N·∫øu ch·∫Øc ch·∫Øn ƒë√£ l√£i th√¨ s·∫Ω ch·ªët*/
                                if (checkPs.unRealizedProfit > 0) {
                                    await binance.FuturesMarketBuySell(symbol, priceTP, "BUY");
                                    await telegram.log(`ƒê√£ ƒë√≥ng v·ªã th·∫ø üî¥ ${symbol} ${leverage}x|${priceTP}: R: ${rsi}; E: ${checkPs.entryPrice}; M: ${checkPs.markPrice}; TP: ${tpsl}%`);
                                }
                                /*N·∫øu kh√¥ng l√£i th√¨ s·∫Ω th√¥ng b√°o ti·∫øp t·ª•c DCA*/
                                else {
                                    await telegram.log(`Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán ƒë√≥ng v·ªã th·∫ø üî¥ ${symbol} ${leverage}x|${priceTP}: R: ${rsi}; E: ${checkPs.entryPrice}; M: ${checkPs.markPrice}; TP: ${tpsl}%`);
                                }
                            }
                        }
                    }
                }
                else {

                    /*N·∫øu RSI < Number(process.env.envBinanceFunctionRSIMin) => ƒêang n·∫±m trong v√πng qu√° b√°n*/
                    if (rsi < Number(process.env.envBinanceFunctionRSIMin)) {

                        /*Ki·ªÉm tra xem ƒë√£ c√≥ l·ªánh ch∆∞a?*/
                        /*N·∫øu ch∆∞a c√≥ l·ªánh th√¨ v√†o 1 l·ªánh m·ªõi*/
                        const checkPs = (await binance.FuturesPositionRisk(symbol))[0];
                        if (checkPs.positionAmt == 0) {
                            await binance.FuturesMarketBuySell(symbol, price, "BUY");
                            const checkPsOpen = (await binance.FuturesPositionRisk(symbol))[0];
                            await telegram.log(`ƒê√£ m·ªü v·ªã th·∫ø üü¢ ${symbol} ${leverage}x|${price}: R: ${rsi}; E: ${checkPsOpen.entryPrice}; M: ${checkPsOpen.markPrice}`);
                        }
                        else {

                            /*Tr∆∞·ªùng h·ª£p rsi down th·∫£m n·ªØa th√¨ DCA*/
                            if (rsi < rsiTemp) {
                                await binance.FuturesMarketBuySell(symbol, price, "BUY");
                                const checkPsDCA = (await binance.FuturesPositionRisk(symbol))[0];
                                await telegram.log(`ƒê√£ DCA v·ªã th·∫ø üü¢ ${symbol} ${leverage}x|${checkPsDCA.positionAmt}: R: ${rsi}; E: ${checkPs.entryPrice}; M: ${checkPs.markPrice}`);
                            }
                        }
                    }
                    /*N·∫øu RSI > Number(process.env.envBinanceFunctionRSIMax) => ƒêang n·∫±m trong v√πng qu√° mua*/
                    else {

                        /*Ki·ªÉm tra xem ƒë√£ c√≥ l·ªánh ch∆∞a?*/
                        /*N·∫øu ch∆∞a c√≥ l·ªánh th√¨ v√†o 1 l·ªánh m·ªõi*/
                        const checkPs = (await binance.FuturesPositionRisk(symbol))[0];
                        if (checkPs.positionAmt == 0) {
                            await binance.FuturesMarketBuySell(symbol, price, "SELL");
                            const checkPsOpen = (await binance.FuturesPositionRisk(symbol))[0];
                            await telegram.log(`ƒê√£ m·ªü v·ªã th·∫ø üî¥ ${symbol} ${leverage}x|${price}: R: ${rsi}; E: ${checkPsOpen.entryPrice}; M: ${checkPsOpen.markPrice}`);
                        }
                        else {

                            /*Tr∆∞·ªùng h·ª£p rsi down th·∫£m n·ªØa th√¨ DCA*/
                            if (rsi > rsiTemp) {
                                await binance.FuturesMarketBuySell(symbol, price, "SELL");
                                const checkPsDCA = (await binance.FuturesPositionRisk(symbol))[0];
                                await telegram.log(`ƒê√£ DCA v·ªã th·∫ø üî¥ ${symbol} ${leverage}x|${checkPsDCA.positionAmt}: R: ${rsi}; E: ${checkPs.entryPrice}; M: ${checkPs.markPrice}`);
                            }
                        }
                    }
                }

                rsiTemp = rsi;
            }

            if (process.env.envBinanceFunctionRSIBOT == "1") {
                await telegram.log(`Kh·ªüi t·∫°o bot th√†nh c√¥ng`);
                process.env.envBinanceFunctionRSIBOT = "0";
            }
        }
    });
}

module.exports = { Main }